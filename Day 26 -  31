Problem 1 :Missing Number
Problem - https://leetcode.com/problems/missing-number/description/
class Solution {
    public int missingNumber(int[] arr) {
        int i = 0;
        while (i < arr.length ) {
            int current = arr[i];
            if (i == current || current >= arr.length) {
                i++;
            }
            else {
                swap(current ,arr, i);
            }
        }
        for(int k = 0 ; k < arr.length ; k++){
            System.out.print(arr[k]);
        }
        for(int j = 0; j < arr.length ; j++){
            if(j != arr[j]){
                return j;
            }
        }
        return arr.length ;
    }
    public static int[] swap(int current ,int[] arr, int i){
        int temp = arr[current];
        arr[current] = arr[i];
        arr[i] = temp;
        return arr;
    }
}
Problem 2 : Search a 2D Matrix
Problem - https://leetcode.com/problems/search-a-2d-matrix/description/
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;
        int left = 0;
        int right = row * col -1;
        while(left<= right){
            int mid = left + (right -left)/2;
            int a = mid / col;
            int b = mid % col;
            if(matrix[a][b] == target){
                return true;
            }else if(matrix[a][b]>target){
                right = mid -1;
            }else{
                left = mid + 1;
            }
        }
        return false;
    }
}
Problem 3 :  Find the Duplicate Number
Problem - https://leetcode.com/problems/find-the-duplicate-number/
class Solution {
    public int findDuplicate(int[] nums) {
        int i = 0;
        while(i < nums.length ){
            int current = nums[i] - 1;
            if(i == current){
                i++;
            }else{
                if(nums[current] == nums[i]){
                   return nums[current];
                }else{
                swap( current ,nums  , i);
                }
            }
        }
        return -1;
    }
    public static int[] swap(int current ,int[] arr, int i){
        int temp = arr[current];
        arr[current] = arr[i];
        arr[i] = temp;
        return arr;
    }
}
Problem 4:  Jump Game
Problem - https://leetcode.com/problems/jump-game/description/
class Solution {
    public boolean canJump(int[] nums) {
        int end = nums.length - 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            if (i + nums[i] >= end) {
                end = i;
            }
        }
        return end == 0;
    }
}
Problem 5 : Add to Array-Form of Integer
Problem - https://leetcode.com/problems/add-to-array-form-of-integer/description/
class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
        List<Integer> ans = new ArrayList<>();
        int i = num.length -1;

        while(i >= 0 || k > 0){
            if(i >= 0){
                k += num[i];
            }
            ans.add(0,k%10);
            k = k / 10;
            i--;
        }
        return ans;
    }
}
Problem 6 : Count Items Matching a Rule
Problem - https://leetcode.com/problems/count-items-matching-a-rule/submissions/1421935482/
class Solution {
    public int countMatches(List<List<String>> items, String ruleKey, String ruleValue) {
        int index ;
        if(ruleKey.equals("type")){
            index = 0;
        }else if (ruleKey.equals("color") ){
            index = 1;
        }else{
            index = 2;
        }
        int count = 0;
        for(int i = 0 ; i < items.size() ; i++){
            if(items.get(i).get(index).equals(ruleValue)){
                count++;
            }
        }

return count;
    }
}
Problem 7 : Mishka and Game
Problem - https://codeforces.com/contest/703/problem/A

Problem 8 : In Search of an Easy Problem
Problem - https://codeforces.com/contest/1030/problem/A
