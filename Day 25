Problem 1 : First Bad Version
Problem - https://leetcode.com/problems/first-bad-version/
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int start = 0;
        int end = n;
        // int ans = 0;
        while(start <=end){
            int mid = start + (end -start)/2;
            if(isBadVersion(mid)){
                start = mid;
                end = mid;
            }else{
                start = mid ;
            }
        }
        return start;
    }
}

Problem 2 : Find First and Last Position of Element in Sorted Array 
Problem - https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = {-1 , -1};
        arr[0] = search(nums , target , true);

        if(arr[0] != -1){
            arr[1] = search(nums , target , false);
        }
        return arr;
    }
    static int search(int[] arr , int target , boolean checkValue){
        int start = 0;
        int end = arr.length -1;
        int ans = -1;
        while(start <= end){
            int mid = start + (end -start)/2;
            if(arr[mid] > target){
                end = mid -1;
            }else if(arr[mid] < target ){
                start = mid + 1;
            }else{
                ans = mid ;
                if(checkValue){
                    end = mid -1 ;
                }else{
                    start = mid + 1;
                }
            }
        }
        return ans ;
    }
}
